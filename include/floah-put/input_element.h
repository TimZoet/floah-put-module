#pragma once

////////////////////////////////////////////////////////////////
// Standard includes.
////////////////////////////////////////////////////////////////

#include <cstdint>

////////////////////////////////////////////////////////////////
// Module includes.
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
// Current target includes.
////////////////////////////////////////////////////////////////

namespace floah
{
    class InputElement
    {
    public:
        ////////////////////////////////////////////////////////////////
        // Constructors.
        ////////////////////////////////////////////////////////////////

        InputElement();

        InputElement(const InputElement&) = delete;

        InputElement(InputElement&&) noexcept = delete;

        virtual ~InputElement() noexcept;

        InputElement& operator=(const InputElement&) = delete;

        InputElement& operator=(InputElement&&) noexcept = delete;

        ////////////////////////////////////////////////////////////////
        // Getters.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] int32_t getInputLayer() const noexcept;

        ////////////////////////////////////////////////////////////////
        // Setters.
        ////////////////////////////////////////////////////////////////

        void setInputLayer(int32_t layer) noexcept;

        ////////////////////////////////////////////////////////////////
        // Input.
        ////////////////////////////////////////////////////////////////

        [[nodiscard]] virtual bool intersect(int32_t x, int32_t y) const = 0;

        virtual void onMouseEnter() const;

        virtual void onMouseExit() const;

    protected:
        ////////////////////////////////////////////////////////////////
        // Member variables.
        ////////////////////////////////////////////////////////////////

        int32_t inputLayer = 0;
    };
}  // namespace floah
